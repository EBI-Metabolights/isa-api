THE ISATAB/BII ISA TOOLS, COMMAND LINE VERSION

In addition to this README file more documentation is available in
src/main/doc/

This package contains a set of tools used at the EBII to manage the
submission of multi-omics experiments, by means of the ISA-TAB format.
It allows to submit data into the BioInvestigation Index (BII) database
(BII), as well as to prepare the files needed to submit ISA-TAB assays
into omics-specific databases (MAGE-TAB files for ArrayExpress and
PRIDE-ML files for PRIDE).

From the point of view of the end user, the tools are accessible
both through a set of graphical applications and through line commands, 
which performs several submission-related tasks.



UNIX AND WINDOWS
The command invocation examples that follow in this document refer to the the Bash scripts that have to 
be used under Unix environments for launching the commands. For example: 

  ./validate.sh ~/isatab/example
  
Under the Windows OS, you just need to 1) remove the unnecessary prefix about the current directory "./" 
(assuming you are under bin/, this is not necessary) and 2) remove the ".sh" extension. 
That is, the example above becomes: 

  validate.sh C:\isatab\example

By doing that corresponding .bat files will be used, in place of the Unix scripts. as you can see above, 
you must use Windows conventions for the file paths. Java doesn't care about '/' vs. '\', but, when you invoke a .bat
script, the Windows shell is involved, before Java invocation, so in such a case you *must* use '\' as path
separator. In configuration files (eg: hibernate.properties) you can safely use '/', because these values are
directly used by our Java code.
 


GENERAL OPTIONS

The following options are available in all commands. 

- The --log-file option 

The ISA Tools uses log4j for logging. If you use the default log4j.properties configuration, 
all tools will send log messages to a file named isatools.log, located under <ISATOOLS_HOME> 
(ie: where this README is). The --log-file option allow you to provide an additional path, where to
send an additional log file. This option only works if you change the default log4j.properties, so that
the FileApp appender is added to the list of appenders the logger send messages to. 
In order to do that, you have to change this: 

log4j.rootLogger=INFO,FixedFileApp,ConsoleApp

into this: 

log4j.rootLogger=INFO,FixedFileApp,ConsoleApp,FileApp 

From this file, you can also set several options about logging, please see the default version that is
provided with each ISATOOLS package. Fort further details, please refer to the Log4j documentation: 

  http://logging.apache.org/log4j/1.2/manual.html 


- Setting the JDBC driver path
The JDBC driver is what Java uses to interface the BII relational database. In the file bin/config.sh it can
be defined the file system path where to find the code for the driver. This is added to the Java classpath
(-cp option). Setup this configuration parameter if you use a driver that is not included in the ISA Tools
package (ie: Oracle).



VALIDATION

This command parses an ISA-TAB archive and check it can be mapped to
the BII model and database. Moreover, it provides .dot files, which
graphically describe the experimental pipeline represented by the
ISATAB-format submission. 

Syntax is:

  ./validate.sh [options] <source-path>

The <source-path> parameter can be either:

  - the path to a directory that contains all the files the current
ISATAB submission consists of (i.e.: Investigation file, sample files,
assay files, data files). This is called the submission directory. 
In this directory, a file named named i_xxx.txt
or investigation.csv will be searched and used as ISATAB investigation file.
  - or the path to the investigation file, in this case the
submission directory is assumed to be the one containing the specified
investigation file.

The validation requires that the accessions for the Investigation and 
the studies are set in the investigation file. In case they're not, edit the ISATAB 
submission before issuing the validation command. Fields for accessions are "Investigation Identifier" 
in the Investigation section and "Study Identifier" in the Study section. 

Submitted data are checked and reports are written in the output
directory. In particular, a .dot file is created there, that can be used
with GraphViz (http://www.graphviz.org) to show the graph experimental
design resulting from the submitted files.

Specific Options:

  -d,--report-dir <directory-path>    Is the directory where to save the result
                                      .dot file. Defaults to <source-path>

Examples:

  ./validate.sh ~/isatab/example
  ./validate.sh -l /var/log/isatab/isatools.log -d /tmp/investigation.dot /tmp/isatab/example/investigation.csv

WARNING: as you can see, you need to always specify absolute paths
(to be fixed in future versions). Otherwise they are all relative to the path of the Import Layer package.



CONVERSION TO OTHER FORMATS

This is used to convert certain parts of ISATAB studies into other formats. For example, you can convert
microarray assay files (including pertinent samples and studies) into MAGETAB submissions. 


Syntax is:

	./convert [options] -t <type> <source-path> [<dest-path>]

Specific Options:

  -t,--target-format <type>    The type of desired conversion output. Valid
                               values are:[magetab, prideml, sra, all]

When you use 'all' as target type, the conversion will be attempted for all the available formats.  
 
Example:

  ./convert.sh -t magetab $(pwd)/../src/test/resources/test-data/isatab/isatab/example $(pwd)/export
  ./convert.sh -t prideml /tmp/test_submission/my_idf.txt $(pwd)/export



LOADING INTO THE BII DATABASE

This command is typically used after the validation, to upload a submission into the BII database.

Configuration of database access
Please refer to the the general documentation for the ISA Tools for that aspect.

Syntax:

  ./load.sh [options] <source-path>

The command has no specific option

Example:

  ./load.sh -l /tmp/loading.log $(pwd)/../src/test/resources/test-data/isatab/isatab/example


Note

IMPORTANT: A newly loaded study WILL NOT be visible in the web application until you set its visibility to 
public. This can be done with the command permch.sh (see below).



UNLOADING STUDIES FROM THE BII DATABASE 

This command allows to remove all the contents of an ISATAB archive which was
previously submitted into the BII database.

Syntax:

  ./unload.sh [options] <study-acc> ...

Example:

  ./unload.sh 'BII-S-1' 'BII-S-2' 

The command ha no specific option. 

Notes.

- The unloading feature has been designed mainly having in mind the use case where a submission with
problems is unloaded from the database just after it has been uploaded. In other cases, entities which have
been reused with later submissions won't be removed. For instance, if an ontology term is reused in a study different
than the one being removed, that term is kept in the database.

- The unload command attempts to remove the directory with the original submission files,
located in the BII file repository. The repository must be set in the configuration directory.
	
	
	
ISATAB EXPORT

This command is used to export back ISA studies from the BII database back to the BII file repository. This is
typically used to update the ISTAB files available for download from the BII web application. It can also be used
to export ISATAB files to a given directory, which can be useful for checking the BII database contents.

Syntax is: 

  ./isaexport.sh [options] <study-acc> <study-acc> ...
 
Specific Options: 

  -d,--to-dir <directory-path>    Exports to local path (instead of the BII
                                  repository), useful for checking
  -s,--skip-data-files            Avoids to export (-to-dir option) or backup
                                  (BII repo export) the data files

Without the -d option, the newly created ISATAB files will be put in the file repository, in the proper
configured locations (see the data_locations.xml file). The command always creates a backup copy of the existing
files. 
 
Examples:

  ./isaexport.sh 'BII-S-1' 'BII-S-2'
  ./isaexport.sh -s -d ~/local_test 'BII-S-1' 'HSP-S-3'



PERMISSION MANAGEMENT

The following commands can be used to add users to the BII database, to change the ownership of the studies and
to set the studies visibility (public or private): 

  useradd.sh
  usermod.sh
  userdel.sh
  permch.sh
   
Execute the commands without parameters to get details about their syntax.


Notes

- Parameter values with spaces: likely these commands will need to receive parameter values that contain blank spaces 
(eg.: for an address or an affiliation). This can be done by quoting the parameter value with double or single quotes. 
For instance: 

   ./usermod.sh --affiliation 'Hinxton, Cambridge, UK' brandizi   

- User deletion: for the moment, deleting a user when there are still studies the user is owner of doesn't work. You have
to first unset the user from the study ownership. 

- Repeatable parameters: as a convenience, permch.sh allows to repeat its parameters, for instance: 

  ./permch.sh --study-owners BII-S-1=-zakmck --study-owners BII-S-2=-zakmck --public BII-S-1,BII-S-2
  
  

CONTENTS LISTING

contents.sh is a convenience command that can be used to show the BII database contents. It can show a brief list
of the studies in the database, where ownership and visibility is reported. It can also list users and their details.


REINDEXING

The reindex.sh command can be used to rebuild the Lucene Index for the studies in the BII database. The index is used 
by the Web application to speed up searches. This command can be useful in case some changes are made straight to the
relational database (ie: via SQL). In fact, in such a case there are some items (eg: study titles), which of changes are
not seen by the web applications (cause they are read from the index files), in order to update all, you should reindex
the relational DB, after having made changes. 

WARNING: manual changing the database at SQL level can be *really* dangerous. Do not even think of doing that, unless 
you are very aware of what you are doing (ideally, you are a ISA developer). 
